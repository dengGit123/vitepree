import{_ as e,c as s,o as n,ae as t}from"./chunks/framework.Dwd5JCA7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/索引访问类型.md","filePath":"docs/typescript/索引访问类型.md","lastUpdated":1758337320000}'),p={name:"docs/typescript/索引访问类型.md"};function o(l,a,i,r,c,d){return n(),s("div",null,[...a[0]||(a[0]=[t(`<h2 id="索引访问类型" tabindex="-1">索引访问类型 <a class="header-anchor" href="#索引访问类型" aria-label="Permalink to &quot;索引访问类型&quot;">​</a></h2><h3 id="通过索引-键-动态获取对象或接口中属性的类型" tabindex="-1">通过索引(键)动态获取对象或接口中属性的类型 <a class="header-anchor" href="#通过索引-键-动态获取对象或接口中属性的类型" aria-label="Permalink to &quot;通过索引(键)动态获取对象或接口中属性的类型&quot;">​</a></h3><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h3><h4 id="语法形式为type-keytype-其中" tabindex="-1">语法形式为<code>Type[KeyType]</code>，其中： <a class="header-anchor" href="#语法形式为type-keytype-其中" aria-label="Permalink to &quot;语法形式为\`Type[KeyType]\`，其中：&quot;">​</a></h4><ul><li><code>Type</code>: 表示对象或接口的类型</li><li><code>KeyType</code>: 必须是 Type 的已知键（或键的联合类型）</li></ul><h3 id="典型用法" tabindex="-1">典型用法 <a class="header-anchor" href="#典型用法" aria-label="Permalink to &quot;典型用法&quot;">​</a></h3><ol><li>获取对象属性的类型</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  name: string;</span></span>
<span class="line"><span>  age: number;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type NameType = Person[&quot;name&quot;]; // 得到string</span></span>
<span class="line"><span>type AgeType = Person[&quot;age&quot;];   // 得到number</span></span></code></pre></div><ol start="2"><li>联合键访问</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type PersonProp = Person[&quot;name&quot; | &quot;age&quot;]; // string | number</span></span></code></pre></div><ol start="3"><li>数组元素的类型提取</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const users = [&quot;Alice&quot;, &quot;Bob&quot;];</span></span>
<span class="line"><span>type User = typeof users[number]; // string</span></span></code></pre></div><ol start="4"><li>嵌套属性访问</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Company {</span></span>
<span class="line"><span>  CEO: { name: string; salary: number };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type CEOSalary = Company[&quot;CEO&quot;][&quot;salary&quot;]; // number</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>键必须是已知的: <code>KeyType</code>必须是<code>Typ</code>e的合法键，否则会报错</li><li>与索引签名的区别: <strong>索引签名定义对象的结构</strong> ;而索引访问类型是提取已有类型的<strong>属性的类型</strong></li></ul>`,16)])])}const y=e(p,[["render",o]]);export{h as __pageData,y as default};
