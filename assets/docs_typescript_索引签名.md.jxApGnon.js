import{_ as s,c as n,o as e,ae as t}from"./chunks/framework.Dwd5JCA7.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/索引签名.md","filePath":"docs/typescript/索引签名.md","lastUpdated":1758337320000}'),i={name:"docs/typescript/索引签名.md"};function p(l,a,r,c,o,d){return e(),n("div",null,[...a[0]||(a[0]=[t(`<h2 id="索引签名-用于定义对象动态属性的类型机制-允许开发者指定对象的键类型和值类型" tabindex="-1">索引签名： 用于定义对象动态属性的类型机制，允许开发者指定对象的键类型和值类型 <a class="header-anchor" href="#索引签名-用于定义对象动态属性的类型机制-允许开发者指定对象的键类型和值类型" aria-label="Permalink to &quot;索引签名： 用于定义对象动态属性的类型机制，允许开发者指定对象的键类型和值类型&quot;">​</a></h2><h3 id="一、基本语法" tabindex="-1">一、基本语法 <a class="header-anchor" href="#一、基本语法" aria-label="Permalink to &quot;一、基本语法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> interface InterfaceName{</span></span>
<span class="line"><span>  [key: keyType]:valueType // 索引签名: keyType只能是string,number,symbol; valueType可以是任意类型;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> }</span></span></code></pre></div><h3 id="二、主要类型" tabindex="-1">二、主要类型 <a class="header-anchor" href="#二、主要类型" aria-label="Permalink to &quot;二、主要类型&quot;">​</a></h3><h4 id="_1-字符串索引签名-适用于动态字符串键的对象" tabindex="-1">1. 字符串索引签名：适用于动态字符串键的对象 <a class="header-anchor" href="#_1-字符串索引签名-适用于动态字符串键的对象" aria-label="Permalink to &quot;1. 字符串索引签名：适用于动态字符串键的对象&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface StringIndexed {</span></span>
<span class="line"><span>  [prop:string]: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const dict: StringIndexed = { name: &quot;Alice&quot; }; // 合法</span></span>
<span class="line"><span>dict.age = &quot;30&quot;; // 合法</span></span></code></pre></div><h4 id="_2-数字索引签名-常用于类数组结构" tabindex="-1">2. 数字索引签名：常用于类数组结构 <a class="header-anchor" href="#_2-数字索引签名-常用于类数组结构" aria-label="Permalink to &quot;2. 数字索引签名：常用于类数组结构&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface NumArray {</span></span>
<span class="line"><span>  [index: number]: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>const arr: NumArray = [&quot;a&quot;, &quot;b&quot;]; // 合法</span></span></code></pre></div><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ol><li>动态属性对象:不确定属性名的对象</li><li>‌混合类型属性: 结合已知属性和动态属性时，需确保已知属性类型兼容索引签名类型</li></ol><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>若同时存在明确属性和索引签名,已知属性的类型必须是索引值类型的子类型(即索引签名的类型要兼容已知属性的类型)</li><li>数字索引的返回值类型需兼容字符串索引类型（因 JavaScript 会隐式转换数字键为字符串）</li></ul><h5 id="当接口同时包含数字索引签名和字符串索引签名时-数字索引的返回值类型必须兼容字符串索引的返回值类型。这是因为-javascript-在运行时会将数字索引隐式转换为字符串索引" tabindex="-1">当接口同时包含数字索引签名和字符串索引签名时，数字索引的返回值类型必须兼容字符串索引的返回值类型。这是因为 JavaScript 在运行时会将数字索引隐式转换为字符串索引 <a class="header-anchor" href="#当接口同时包含数字索引签名和字符串索引签名时-数字索引的返回值类型必须兼容字符串索引的返回值类型。这是因为-javascript-在运行时会将数字索引隐式转换为字符串索引" aria-label="Permalink to &quot;当接口同时包含数字索引签名和字符串索引签名时，数字索引的返回值类型必须兼容字符串索引的返回值类型。这是因为 JavaScript 在运行时会将数字索引隐式转换为字符串索引&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//数字索引的返回值类型必须是字符串索引返回值类型的子类型</span></span>
<span class="line"><span>interface MixedInterface {</span></span>
<span class="line"><span>  [index: number]: string;  // 合法，因为 string 是 any 的子类型</span></span>
<span class="line"><span>  [key: string]: any;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>//若违反此规则（如数字索引返回 number 而字符串索引返回 string），会导致类型冲突错误</span></span></code></pre></div>`,14)])])}const b=s(i,[["render",p]]);export{u as __pageData,b as default};
