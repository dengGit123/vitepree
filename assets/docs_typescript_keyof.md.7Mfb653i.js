import{_ as e,c as s,o as n,ae as t}from"./chunks/framework.Dwd5JCA7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/keyof.md","filePath":"docs/typescript/keyof.md","lastUpdated":1758337320000}'),o={name:"docs/typescript/keyof.md"};function l(i,a,p,c,r,u){return n(),s("div",null,[...a[0]||(a[0]=[t(`<h2 id="keyof关键字" tabindex="-1">keyof关键字 <a class="header-anchor" href="#keyof关键字" aria-label="Permalink to &quot;keyof关键字&quot;">​</a></h2><ul><li>主要用于获取对象类型的键的集合，把键名作为联合类型返回</li></ul><h2 id="一-基础概念" tabindex="-1">一. 基础概念 <a class="header-anchor" href="#一-基础概念" aria-label="Permalink to &quot;一. 基础概念&quot;">​</a></h2><h3 id="_1-核心作用" tabindex="-1">1. 核心作用 <a class="header-anchor" href="#_1-核心作用" aria-label="Permalink to &quot;1. 核心作用&quot;">​</a></h3><ul><li>提取对象<strong>类型</strong>的所有键名(<strong>属性名</strong>)，得到<strong>键名字面量类型</strong>组成的联合类型(<strong>字符串或数字字面量的联合类型</strong>)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  name: string;</span></span>
<span class="line"><span>  age: number;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type Keys = keyof Person; // &quot;name&quot; | &quot;age&quot;; 等价于 type Keys = &quot;name&quot; | &quot;age&quot;;</span></span></code></pre></div><h3 id="_2-与object-keys-的区别" tabindex="-1">2. 与<code>Object.keys()</code>的区别 <a class="header-anchor" href="#_2-与object-keys-的区别" aria-label="Permalink to &quot;2. 与\`Object.keys()\`的区别&quot;">​</a></h3><ul><li><code>keyof</code>在‌类型层面‌操作,得到的是一个联合类型，由对象类型的所有键名字面量组成联合类型</li><li><code>Object.keys()</code>在值层面操作，得到的是一个键名数组</li></ul><h2 id="二-关键特性" tabindex="-1">二. 关键特性 <a class="header-anchor" href="#二-关键特性" aria-label="Permalink to &quot;二. 关键特性&quot;">​</a></h2><h3 id="_1-索引签名处理" tabindex="-1">1. 索引签名处理 <a class="header-anchor" href="#_1-索引签名处理" aria-label="Permalink to &quot;1. 索引签名处理&quot;">​</a></h3><ul><li>当对象类型包含索引签名时，<code>keyof</code>会将索引签名的键名也考虑在内</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  name: string;</span></span>
<span class="line"><span>  age: number;</span></span>
<span class="line"><span>  [propName: string]: any; // 索引签名</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type Keys = keyof Person; // &quot;name&quot; | &quot;age&quot; | string 等价于 type Keys = &quot;name&quot; | &quot;age&quot; | string;</span></span></code></pre></div><h3 id="_2-只读属性处理" tabindex="-1">2. 只读属性处理 <a class="header-anchor" href="#_2-只读属性处理" aria-label="Permalink to &quot;2. 只读属性处理&quot;">​</a></h3><ul><li>对于只读属性，<code>keyof</code>同样会将其键名列在联合类型中</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  readonly name: string;</span></span>
<span class="line"><span>  age: number;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type Keys = keyof Person; // &quot;name&quot; | &quot;age&quot;; 等价于 type Keys = &quot;name&quot; | &quot;age&quot;;</span></span></code></pre></div><h3 id="_3-可选属性的处理" tabindex="-1">3. 可选属性的处理 <a class="header-anchor" href="#_3-可选属性的处理" aria-label="Permalink to &quot;3. 可选属性的处理&quot;">​</a></h3><ul><li>对于可选属性，<code>keyof</code>也会将它们包括在内</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  name: string;</span></span>
<span class="line"><span>  age?: number; // 可选属性</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>type Keys = keyof Person; // &quot;name&quot; | &quot;age&quot;; 等价于 type Keys = &quot;name&quot; | &quot;age&quot;;</span></span></code></pre></div><h2 id="三-典型应用场景" tabindex="-1">三. 典型应用场景 <a class="header-anchor" href="#三-典型应用场景" aria-label="Permalink to &quot;三. 典型应用场景&quot;">​</a></h2><h3 id="_1-类型安全属性访问" tabindex="-1">1. 类型安全属性访问 <a class="header-anchor" href="#_1-类型安全属性访问" aria-label="Permalink to &quot;1. 类型安全属性访问&quot;">​</a></h3><ul><li>通过泛型约束确保函数参数为对象的合法键</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function getProp&lt;T, K extends keyof T&gt;(obj: T, key: K): T[K] {</span></span>
<span class="line"><span>  return obj[key]; // 安全访问</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>const user = { name: &quot;Alice&quot;, age: 30 };</span></span>
<span class="line"><span>getProp(user, &quot;name&quot;); // 正确</span></span>
<span class="line"><span>getProp(user, &quot;email&quot;); //编译错误，因为&quot;email&quot;不是user的键</span></span></code></pre></div><h3 id="_2-动态校验对象属性" tabindex="-1">2. 动态校验对象属性 <a class="header-anchor" href="#_2-动态校验对象属性" aria-label="Permalink to &quot;2. 动态校验对象属性&quot;">​</a></h3><ul><li>限制函数只能操作对象存在的属性</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function updateProp&lt;T, K extends keyof T&gt;(obj: T, key: K, value: T[K]) {</span></span>
<span class="line"><span>  obj[key] = value; // 键和值类型均受约束</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_3-枚举类型键提取" tabindex="-1">3. 枚举类型键提取 <a class="header-anchor" href="#_3-枚举类型键提取" aria-label="Permalink to &quot;3. 枚举类型键提取&quot;">​</a></h3><ul><li>提取枚举类型的所有键名</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>enum Status { Error = -1, Init = 0 }</span></span>
<span class="line"><span>type StatusKeys = keyof typeof Status; // &quot;Error&quot; | &quot;Init&quot;; 等价于 type StatusKeys = &quot;Error&quot; | &quot;Init&quot;;</span></span></code></pre></div><h3 id="_4-映射类型" tabindex="-1">4. 映射类型 <a class="header-anchor" href="#_4-映射类型" aria-label="Permalink to &quot;4. 映射类型&quot;">​</a></h3><ul><li>用于创建基于对象键的类型映射</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type ReadonlyKeys&lt;T&gt; = {</span></span>
<span class="line"><span>  [P in keyof T]: Readonly&lt;T[P]&gt;;</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="四-特殊场景处理" tabindex="-1">四. 特殊场景处理 <a class="header-anchor" href="#四-特殊场景处理" aria-label="Permalink to &quot;四. 特殊场景处理&quot;">​</a></h2><ol><li>‌空对象类型</li></ol><ul><li>对于空对象类型，<code>keyof</code>的结果是<code>never</code></li></ul><ol start="2"><li>原始类型</li></ol><ul><li>对于原始类型（如<code>string</code>, <code>number</code>等），使用<code>keyof</code>会返回其包装对象的属性和方法联合类型</li><li>例如，<code>keyof string</code>的结果是<code>number | &quot;length&quot; | &quot;charAt&quot; | ...</code></li><li>这是因为<code>keyof</code>实际上是针对对象类型的键名进行操作的，而不是原始类型本身。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type StringKeys = keyof string; // 结果是 &quot;length&quot; | &quot;charAt&quot; | ...</span></span></code></pre></div><h2 id="_5-注意事项" tabindex="-1">5. 注意事项 <a class="header-anchor" href="#_5-注意事项" aria-label="Permalink to &quot;5. 注意事项&quot;">​</a></h2><ol><li>仅作用于类型</li></ol><ul><li><code>keyof</code>后面必须是<strong>类型</strong>，而不是值</li></ul>`,40)])])}const g=e(o,[["render",l]]);export{h as __pageData,g as default};
