import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dwd5JCA7.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/typeof.md","filePath":"docs/typescript/typeof.md","lastUpdated":1758337320000}'),n={name:"docs/typescript/typeof.md"};function l(h,s,p,k,o,r){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="typeof的作用" tabindex="-1">typeof的作用 <a class="header-anchor" href="#typeof的作用" aria-label="Permalink to &quot;typeof的作用&quot;">​</a></h2><ul><li>用于获取一个变量或对象的类型</li><li>typeof操作符从值中推出类型</li></ul><h2 id="检测范围" tabindex="-1">检测范围 <a class="header-anchor" href="#检测范围" aria-label="Permalink to &quot;检测范围&quot;">​</a></h2><ul><li>变量</li><li>对象</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// &#39;string&#39;,&#39;number&#39;,&#39;boolean&#39;,&#39;symbol&#39;,&#39;bigint&#39;,&#39;undefined&#39;,&#39;object&#39;,&#39;function&#39;</span></span></code></pre></div><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><h2 id="‌一-基本数据类型推导" tabindex="-1">‌一. 基本数据类型推导 <a class="header-anchor" href="#‌一-基本数据类型推导" aria-label="Permalink to &quot;‌一. 基本数据类型推导&quot;">​</a></h2><ol><li><strong>基本数据类型</strong>: 对变量使用<code>typeof</code>可推导出对应的TS类型，如<code>string</code>、<code>number</code>等</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const str = &#39;hello&#39;;</span></span>
<span class="line"><span>type StrType = typeof str;  // 推导为string类型</span></span></code></pre></div><ol start="2"><li><strong>对象类型</strong>‌：能完整捕获对象的结构类型，包括嵌套属性</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: string; age: number }</span></span></code></pre></div><h2 id="二-函数与类类型处理" tabindex="-1">二. 函数与类类型处理 <a class="header-anchor" href="#二-函数与类类型处理" aria-label="Permalink to &quot;二. 函数与类类型处理&quot;">​</a></h2><ol><li><strong>函数类型</strong>‌：可提取函数签名，包括参数和返回值类型</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GreetType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greet;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (name: string) =&gt; string</span></span></code></pre></div><ol start="2"><li><strong>类构造函数</strong>‌：通过typeof获取类的构造签名，用于工厂函数类型校验</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PointConstructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point;</span></span></code></pre></div><h2 id="三-进阶应用场景" tabindex="-1">三. 进阶应用场景 <a class="header-anchor" href="#三-进阶应用场景" aria-label="Permalink to &quot;三. 进阶应用场景&quot;">​</a></h2><ol><li><strong>联合工具类型</strong>‌：与<code>keyof</code>结合实现字段校验或生成映射类型</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;host&quot; | &quot;port&quot;</span></span></code></pre></div><ol start="2"><li><strong>枚举类型处理</strong>‌：配合<code>keyof</code>获取枚举键的字面量联合类型</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ColorKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Red&quot; | &quot;Green&quot;</span></span></code></pre></div><h2 id="四-注意事项" tabindex="-1">四. 注意事项 <a class="header-anchor" href="#四-注意事项" aria-label="Permalink to &quot;四. 注意事项&quot;">​</a></h2><ol><li><strong>编译时特性</strong>‌：<code>typeof</code>在TS中仅作用于类型上下文，与<strong>JS</strong>运行时<code>typeof</code>行为不同 2.<strong>类型精确性</strong>‌：对null推导为null类型，而JS中返回&quot;object&quot;</li></ol>`,23)])])}const y=i(n,[["render",l]]);export{g as __pageData,y as default};
