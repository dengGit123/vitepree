import{_ as e,c as a,o as d,ae as o}from"./chunks/framework.Dwd5JCA7.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/类型断言与类型转换.md","filePath":"docs/typescript/类型断言与类型转换.md","lastUpdated":1758337320000}'),l={name:"docs/typescript/类型断言与类型转换.md"};function r(s,t,i,c,n,h){return d(),a("div",null,[...t[0]||(t[0]=[o(`<h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><ul><li>显式告诉编译器某个值的类型，不改变值，仅影响编译的类型检查</li><li>语法：1. <code>变量 as 类型</code>；2 2. <code>&lt;类型&gt;变量</code></li></ul><h3 id="典型场景‌" tabindex="-1">典型场景‌ <a class="header-anchor" href="#典型场景‌" aria-label="Permalink to &quot;典型场景‌&quot;">​</a></h3><ol><li>处理<code>unknown</code>类型时断言为具体类型</li><li>联合类型时断言为具体类型</li><li>DOM元素类型细化（如HTMLCanvasElement）</li></ol><h3 id="特点‌-编译阶段行为-无运行时开销-可能引发类型不安全" tabindex="-1">特点‌：编译阶段行为，无运行时开销，可能引发类型不安全 <a class="header-anchor" href="#特点‌-编译阶段行为-无运行时开销-可能引发类型不安全" aria-label="Permalink to &quot;特点‌：编译阶段行为，无运行时开销，可能引发类型不安全&quot;">​</a></h3><h2 id="二-类型转换" tabindex="-1">二. 类型转换 <a class="header-anchor" href="#二-类型转换" aria-label="Permalink to &quot;二. 类型转换&quot;">​</a></h2><ul><li>运行时实际改变数据的类型和存储形式</li><li>实现方式:</li></ul><ol><li>显式转换：<code>Number(str)</code>、<code>parseInt()</code></li><li>隐式转换：<code>+str</code>、<code>str * 1</code></li></ol><h3 id="特点-运行时行为-有性能开销-可能导致数据丢失或溢出" tabindex="-1">特点：运行时行为，有性能开销，可能导致数据丢失或溢出 <a class="header-anchor" href="#特点-运行时行为-有性能开销-可能导致数据丢失或溢出" aria-label="Permalink to &quot;特点：运行时行为，有性能开销，可能导致数据丢失或溢出&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let str = &quot;123&quot;;</span></span>
<span class="line"><span>let num = Number(str); // 字符串→数值转换</span></span></code></pre></div><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>类型断言</th><th>类型转换</th></tr></thead><tbody><tr><td>操作阶段</td><td>编译时</td><td>运行时</td></tr><tr><td>目的</td><td>告知编译器变量类型，不改变值本身</td><td>实际改变数据存储形式和类型</td></tr><tr><td>语法</td><td><code>变量 as 类型</code>或<code>&lt;类型&gt;变量</code></td><td>如<code>Number(str)</code>、<code>parseInt()</code>等函数调用</td></tr><tr><td>性能影响</td><td>无运行时开销，仅影响类型检查</td><td>有性能开销，可能引发数据丢失或溢出</td></tr></tbody></table>`,12)])])}const _=e(l,[["render",r]]);export{u as __pageData,_ as default};
