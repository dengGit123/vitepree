import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.Dwd5JCA7.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/命名空间.md","filePath":"docs/typescript/命名空间.md","lastUpdated":1758337320000}'),t={name:"docs/typescript/命名空间.md"};function e(h,s,p,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h2 id="命名空间-namespace" tabindex="-1">命名空间（Namespace） <a class="header-anchor" href="#命名空间-namespace" aria-label="Permalink to &quot;命名空间（Namespace）&quot;">​</a></h2><ul><li>用于避免全局作用域的命名冲突</li></ul><h2 id="一-基础定义与导出" tabindex="-1">一. 基础定义与导出 <a class="header-anchor" href="#一-基础定义与导出" aria-label="Permalink to &quot;一. 基础定义与导出&quot;">​</a></h2><ul><li>使用<code>namespace</code>关键字定义命名空间，内部成员需通过<code>export</code>暴露才能被外部访问</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calcArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyNamespace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calcArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用导出函数</span></span></code></pre></div><h2 id="二-嵌套与多文件拆分" tabindex="-1">二. 嵌套与多文件拆分 <a class="header-anchor" href="#二-嵌套与多文件拆分" aria-label="Permalink to &quot;二. 嵌套与多文件拆分&quot;">​</a></h2><h3 id="_1-嵌套命名空间‌-支持层级结构以组织复杂代码" tabindex="-1">1. <strong>嵌套命名空间</strong>‌：支持层级结构以组织复杂代码 <a class="header-anchor" href="#_1-嵌套命名空间‌-支持层级结构以组织复杂代码" aria-label="Permalink to &quot;1. **嵌套命名空间**‌：支持层级结构以组织复杂代码&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Outer.Inner.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问嵌套成员</span></span></code></pre></div><h3 id="_2-‌多文件共享命名空间‌-同名命名空间在不同文件中会自动合并" tabindex="-1">2. <strong>‌多文件共享命名空间</strong>‌：同名命名空间在不同文件中会自动合并 <a class="header-anchor" href="#_2-‌多文件共享命名空间‌-同名命名空间在不同文件中会自动合并" aria-label="Permalink to &quot;2. **‌多文件共享命名空间**‌：同名命名空间在不同文件中会自动合并&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file1.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file2.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> funcB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合并后可通过Shared.funcA和Shared.funcB访问</span></span></code></pre></div><h2 id="三-命名空间与模块有何区别" tabindex="-1">三. 命名空间与模块有何区别 <a class="header-anchor" href="#三-命名空间与模块有何区别" aria-label="Permalink to &quot;三. 命名空间与模块有何区别&quot;">​</a></h2><h3 id="_1-作用域隔离机制" tabindex="-1">1. 作用域隔离机制 <a class="header-anchor" href="#_1-作用域隔离机制" aria-label="Permalink to &quot;1. 作用域隔离机制&quot;">​</a></h3><ul><li><ol><li><strong>‌模块</strong>‌：通过<strong>文件级作用域</strong>实现隔离，任何包含顶级<code>import</code>或<code>export</code>的文件自动成为模块，其内部成员默认私有，需显式导出才能被外部访问。这种设计有效避免全局污染，适合大型项目</li></ol></li><li><ol start="2"><li><strong>命名空间</strong>‌：通过<code>namespace</code>关键字创建逻辑分组，成员需通过<code>export</code>暴露。虽然组织在命名空间内，但本质上仍属于<strong>全局作用域</strong>，仅通过命名限定避免冲突</li></ol></li></ul><h3 id="_2-代码组织方式" tabindex="-1">2. 代码组织方式 <a class="header-anchor" href="#_2-代码组织方式" aria-label="Permalink to &quot;2. 代码组织方式&quot;">​</a></h3><ul><li><ol><li><strong>模块化方案‌</strong>：</li></ol></li><li>支持动态导入（<code>import()</code>）和按需加载</li><li>提供默认导出（<code>export default</code>）和命名导出（<code>export const</code>）</li><li>编译后依赖模块加载器（如Webpack）处理依赖关系</li><li><ol start="2"><li><strong>命名空间方案‌</strong></li></ol></li><li>通过嵌套命名空间实现层级结构</li><li>跨文件扩展需使用<code>///&lt;reference path=&quot;...&quot; /&gt;</code>指令</li><li>编译为IIFE（立即执行函数）实现作用域隔离</li></ul>`,15)])])}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
