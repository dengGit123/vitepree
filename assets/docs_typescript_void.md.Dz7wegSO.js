import{_ as s,c as n,o as a,ae as i}from"./chunks/framework.Dwd5JCA7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/void.md","filePath":"docs/typescript/void.md","lastUpdated":1758337320000}'),d={name:"docs/typescript/void.md"};function o(l,e,t,p,c,u){return a(),n("div",null,[...e[0]||(e[0]=[i(`<h4 id="void-一个特殊的类型-用于表示函数没有返回值-即不返回任何值" tabindex="-1">void: 一个特殊的类型,用于表示函数没有返回值（即不返回任何值） <a class="header-anchor" href="#void-一个特殊的类型-用于表示函数没有返回值-即不返回任何值" aria-label="Permalink to &quot;void: 一个特殊的类型,用于表示函数没有返回值（即不返回任何值）&quot;">​</a></h4><ul><li>表示没有任何类型</li><li>只有<code>null</code>,和<code>undefined</code> 赋值,因为<strong>null</strong>和<strong>undefined</strong>是所有类型的子类型</li></ul><ol><li>基本定义</li></ol><ul><li>函数返回值‌: 当函数没有<code>return</code>语句或显式返回<code>undefined</code>时，其返回类型为<code>void</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function logMessage(): void {</span></span>
<span class="line"><span>  console.log(&quot;Hello&quot;);</span></span>
<span class="line"><span>  // 无返回值</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>与 undefined 的区别‌</li></ul><h4 id="void表示-忽略返回值-而undefined是明确的返回值。若函数返回-undefined-需显式声明" tabindex="-1"><code>void</code>表示“忽略返回值”，而<code>undefined</code>是明确的返回值。若函数返回 undefined，需显式声明： <a class="header-anchor" href="#void表示-忽略返回值-而undefined是明确的返回值。若函数返回-undefined-需显式声明" aria-label="Permalink to &quot;\`void\`表示“忽略返回值”，而\`undefined\`是明确的返回值。若函数返回 undefined，需显式声明：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function returnUndefined(): undefined {</span></span>
<span class="line"><span>  return undefined; // 必须显式返回</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="2"><li>使用场景</li></ol><ul><li><code>回调函数‌：</code>常见于事件处理函数或异步回调，不关心返回值时使用 <code>void</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>setTimeout((): void =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;Delayed&quot;);</span></span>
<span class="line"><span>}, 1000);</span></span></code></pre></div><ul><li><code>方法声明‌：</code>接口或类中定义无返回值的方法</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Button {</span></span>
<span class="line"><span>  onClick: () =&gt; void;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><code>忽略返回值‌：</code>强制忽略函数的返回值（如 <code>Array.prototype.push</code> 返回长度，但可能不关心）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const nums: number[] = [1, 2];</span></span>
<span class="line"><span>const result: void = nums.push(3); // 明确忽略返回值</span></span></code></pre></div>`,15)])])}const v=s(d,[["render",o]]);export{h as __pageData,v as default};
