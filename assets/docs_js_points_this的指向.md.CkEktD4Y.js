import{_ as e,c as i,o as a,ae as s}from"./chunks/framework.Dwd5JCA7.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/js_points/this的指向.md","filePath":"docs/js_points/this的指向.md","lastUpdated":1758337320000}'),o={name:"docs/js_points/this的指向.md"};function l(r,t,n,d,h,c){return a(),i("div",null,[...t[0]||(t[0]=[s('<h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><ul><li>运行时绑定，在<strong>函数调用</strong>的时候才确定this的指向</li><li>使用<code>call</code>,<code>apply</code>,<code>bind</code>可以改变this的指向</li></ul><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><ul><li>没有自己的this，arguments;</li><li>this指向<strong>最近父级</strong>的作用域的this</li><li>this不能修改</li></ul><h2 id="new关键字" tabindex="-1">new关键字 <a class="header-anchor" href="#new关键字" aria-label="Permalink to &quot;new关键字&quot;">​</a></h2><ol><li>创建一个新的空对象；</li><li>将新对象的原型指向构造函数的<code>prototype</code>；</li><li>this指向新对象</li><li>返回新对象(this)</li></ol>',6)])])}const u=e(o,[["render",l]]);export{p as __pageData,u as default};
