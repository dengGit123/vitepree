import{_ as a,c as t,o as n,ae as i}from"./chunks/framework.Dwd5JCA7.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code_standard/git_husky.md","filePath":"docs/code_standard/git_husky.md","lastUpdated":1758337320000}'),l={name:"docs/code_standard/git_husky.md"};function e(o,s,p,c,d,r){return n(),t("div",null,[...s[0]||(s[0]=[i(`<h2 id="核心依赖安装" tabindex="-1">核心依赖安装 <a class="header-anchor" href="#核心依赖安装" aria-label="Permalink to &quot;核心依赖安装&quot;">​</a></h2><ul><li>npm install husky lint-staged @commitlint/cli @commitlint/config-conventional --save-dev</li></ul><ol><li>husky</li></ol><ul><li><strong>核心作用</strong>: Git 钩子管理工具，用于在 Git 事件（如提交、推送）时触发自定义脚本，实现自动化任务拦截或执行</li><li>典型场景 <ul><li>提交前<code>（pre-commit）</code>触发代码检查</li><li>提交信息校验<code>（commit-msg）</code>时验证格式</li></ul></li></ul><ol start="2"><li>lint-staged</li></ol><ul><li><strong>核心作用</strong>: 仅对暂存区（Staged）的文件执行代码检查或格式化工具，避免全量扫描,提高效率</li><li><strong>典型场景</strong>(<code>package.json</code>)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//package.json</span></span>
<span class="line"><span>&quot;lint-staged&quot;: {</span></span>
<span class="line"><span>  &quot;*.{js,vue}&quot;: [&quot;eslint --fix&quot;, &quot;prettier --write&quot;]</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>协同机制</strong>‌：与 <code>husky</code> 的 <code>pre-commit</code> 钩子配合，实现提交前自动化修复代码风格</li></ul><ol start="3"><li>‌@commitlint/cli</li></ol><ul><li><strong>核心作用</strong>: 校验 Git 提交信息是否符合预设的规范</li><li><strong>触发时机</strong>‌：通过 husky 的 commit-msg 钩子调用，拦截不符合规则的提交信息</li><li>校验规则示例</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(login): add password reset  # 合法</span></span>
<span class="line"><span>fix: resolve null pointer        # 合法</span></span>
<span class="line"><span>test                            # 非法（缺少类型）</span></span></code></pre></div><ol start="4"><li>@commitlint/config-conventional</li></ol><ul><li><strong>核心作用</strong>: 提供一套预设的提交信息规范，定义标准提交类型（如 <code>feat|fix|docs</code>）</li></ul><h2 id="协同工作流程" tabindex="-1">协同工作流程 <a class="header-anchor" href="#协同工作流程" aria-label="Permalink to &quot;协同工作流程&quot;">​</a></h2><ol><li><strong>代码提交前</strong>‌：husky 触发 pre-commit 钩子 → lint-staged 修复暂存区文件</li><li><strong>提交信息校验</strong>‌：husky 触发 commit-msg 钩子 → @commitlint/cli 读取 @commitlint/config-conventional 规则验证消息格式</li><li><strong>拦截机制</strong>‌：任一检查失败则阻止提交，确保代码和提交信息均符合规范</li></ol><h2 id="常见组合方案" tabindex="-1">常见组合方案 <a class="header-anchor" href="#常见组合方案" aria-label="Permalink to &quot;常见组合方案&quot;">​</a></h2><ul><li><strong>基础规范</strong>‌：<code>husky</code> + <code>lint-staged</code>（代码检查）</li><li><strong>完整方案</strong>‌：<code>husky + lint-staged + @commitlint/cli + @commitlint/config-conventional</code>（代码+提交信息双校验）</li></ul><h2 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置" aria-label="Permalink to &quot;初始化配置&quot;">​</a></h2><ol><li>启用 <code>Husky</code></li></ol><ul><li>自动生成 .husky 目录并配置 Git 钩子路径：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx husky-init &amp;&amp; npm install</span></span>
<span class="line"><span>//该命令会：</span></span>
<span class="line"><span>//在 package.json 中添加 prepare 脚本</span></span>
<span class="line"><span>//创建默认的 pre-commit 钩子文件</span></span>
<span class="line"><span>//设置 Git 使用 Husky 管理的钩子</span></span></code></pre></div><ol start="2"><li>配置 lint-staged</li></ol><ul><li>在 package.json 中定义针对不同文件的检查规则</li><li>此配置仅对暂存区的指定文件运行格式化工具</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;lint-staged&quot;: {</span></span>
<span class="line"><span>  &quot;*.{js,ts,vue}&quot;: [&quot;eslint --fix&quot;, &quot;prettier --write&quot;],</span></span>
<span class="line"><span>  &quot;*.{css,scss}&quot;: [&quot;stylelint --fix&quot;, &quot;prettier --write&quot;]</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="钩子文件示例" tabindex="-1">钩子文件示例 <a class="header-anchor" href="#钩子文件示例" aria-label="Permalink to &quot;钩子文件示例&quot;">​</a></h2><ol><li><strong>‌pre-commit</strong>‌ (<code>.husky/pre-commit</code>)</li></ol><ul><li>提交前自动执行代码检查和修复</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx lint-staged</span></span></code></pre></div><ol start="2"><li><strong>‌commit-msg</strong>‌ (<code>.husky/commit-msg</code>)</li></ol><ul><li>提交信息校验</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx commitlint --edit &quot;$1&quot;</span></span>
<span class="line"><span>//要求提交信息格式为：type(scope?): subject（如 feat(login): add password reset）</span></span></code></pre></div><h2 id="commitlint-配置" tabindex="-1">Commitlint 配置 <a class="header-anchor" href="#commitlint-配置" aria-label="Permalink to &quot;Commitlint 配置&quot;">​</a></h2><ul><li>创建 <code>commitlint.config.js</code> 定义提交规范</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  extends: [&#39;@commitlint/config-conventional&#39;],</span></span>
<span class="line"><span>  rules: {</span></span>
<span class="line"><span>    &#39;type-enum&#39;: [2, &#39;always&#39;, [&#39;feat&#39;, &#39;fix&#39;, &#39;docs&#39;, &#39;style&#39;, &#39;refactor&#39;, &#39;test&#39;, &#39;chore&#39;]]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="常见问题解决" tabindex="-1">常见问题解决 <a class="header-anchor" href="#常见问题解决" aria-label="Permalink to &quot;常见问题解决&quot;">​</a></h2><ul><li><strong>‌钩子未触发</strong>‌：检查 .git/config 中 core.hooksPath 是否指向 .husky</li><li><strong>‌性能优化</strong>‌：通过 lint-staged 仅检查暂存区文件，避免全量扫描</li><li><strong>‌规则覆盖</strong>‌：确保 eslint-config-prettier 在 ESLint 配置中最后加载，避免格式化冲突</li></ul>`,36)])])}const h=a(l,[["render",e]]);export{g as __pageData,h as default};
