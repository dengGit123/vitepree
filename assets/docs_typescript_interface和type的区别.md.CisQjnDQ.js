import{_ as a,c as s,o as n,ae as t}from"./chunks/framework.Dwd5JCA7.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/interface和type的区别.md","filePath":"docs/typescript/interface和type的区别.md","lastUpdated":1758337320000}'),i={name:"docs/typescript/interface和type的区别.md"};function p(l,e,c,o,d,r){return n(),s("div",null,[...e[0]||(e[0]=[t(`<h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><ol><li>定义的范围不一样</li></ol><ul><li><code>interface</code> 专门用于描述对象的结构（属性和方法）;</li><li><code>type</code> 为任意类型创建别名</li><li><code>interface</code> 支持同名接口自动合并属性</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface User { name: string; }</span></span>
<span class="line"><span>interface User { age: number; }</span></span>
<span class="line"><span>// 合并后：{ name: string; age: number }</span></span></code></pre></div><ul><li><code>type</code> 禁止重复定义，同名类型会报错</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type User = { name: string };</span></span>
<span class="line"><span>type User = { age: number }; // Error</span></span></code></pre></div><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ol><li>都可以扩展 <ul><li><code>interface‌</code> 通过 <code>extends</code> 实现继承，支持多继承;</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Animal { name: string; }</span></span>
<span class="line"><span>interface Dog extends Animal { breed: string; }</span></span></code></pre></div><ul><li><code>type</code> 通过交叉类型 <code>&amp;</code> 实现合并，不支持多继承</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type Animal = { name: string };</span></span>
<span class="line"><span>type Dog = Animal &amp; { breed: string };</span></span></code></pre></div></li></ol>`,8)])])}const g=a(i,[["render",p]]);export{u as __pageData,g as default};
