import{_ as o,c as s,o as a,ae as l}from"./chunks/framework.Dwd5JCA7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/typescript/tsconfig_json配置文件.md","filePath":"docs/typescript/tsconfig_json配置文件.md","lastUpdated":1758337320000}'),t={name:"docs/typescript/tsconfig_json配置文件.md"};function i(n,e,c,d,p,u){return a(),s("div",null,[...e[0]||(e[0]=[l(`<h2 id="tsconfig-js配置" tabindex="-1">tsconfig.js配置 <a class="header-anchor" href="#tsconfig-js配置" aria-label="Permalink to &quot;tsconfig.js配置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//tsconfig.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;compilerOptions&quot;: {},</span><span> // 编译选项</span></span>
<span class="line"><span>  &quot;include&quot;: [],</span><span> // 包含的文件</span></span>
<span class="line"><span>  &quot;exclude&quot;: [],</span><span> // 排除的文件</span></span>
<span class="line"><span>  &quot;extends&quot;: &quot;&quot;,</span><span> // 继承其他配置</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="‌compileroptions" tabindex="-1">‌compilerOptions <a class="header-anchor" href="#‌compileroptions" aria-label="Permalink to &quot;‌compilerOptions&quot;">​</a></h3><ul><li><p>target：编译成哪个版本的js，值有 <code>ES5</code>、<code>ES6</code>、<code>ESNext</code>等</p></li><li><p>module：生成代码的模块系统，有<code>CommonJS</code>,<code>ESNext</code>,<code>AMD</code>,<code>System</code>,<code>UMD</code>,<code>ES2015</code>,<code>ES2020</code>等</p></li><li><p>lib：编译过程中需要引入的库文件的列表，比如<code>DOM</code>,<code>ES5</code>,<code>ES6</code>等</p></li><li><p>outDir：编译后文件存放的目录</p></li><li><p>rootDir：源码根目录</p></li><li><p>strict：启用所有严格类型检查选项</p></li><li><p>moduleResolution：模块解析策略，如何查找导入的文件，有<code>node</code>,<code>classic</code>等</p><ul><li><ol><li>node：使用Node.js风格，从<code>node_modules</code>中查找模块</li></ol><ul><li>解析流程： <ul><li>检查node_modules目录下是否存在模块</li><li>处理package.json的<code>main</code>/<code>exports</code>字段</li><li>支持目录索引文件 如<code>index.ts</code>, <code>index.js</code>等</li></ul></li></ul></li><li><ol start="2"><li>‌Node16/NodeNext</li></ol><ul><li>针对Node.js的ESM模块系统优化，强制要求文件扩展名（如.js）</li><li>根据package.json的type字段区分CommonJS/ESM</li></ul></li><li><ol start="3"><li>Bundler</li></ol><ul><li>针对打包工具（如Webpack、Rollup）优化，支持动态导入和顶层<code>await</code>，放宽扩展名要求，兼容现代打包器特性</li></ul></li><li><ol start="4"><li>classic：<strong>已废弃</strong> 使用经典风格，仅相对路径从当前目录查找</li></ol></li><li>配置要点： <ul><li>与<code>module</code>关联： <ul><li>module为<code>ESNext</code>时，推荐使用<code>moduleResolution: Node16/NodeNext</code>或<code>Bundler</code></li><li>module为<code>CommonJS</code>,<code>AMD</code>, <code>System</code>, <code>UMD</code>时，推荐使用<code>moduleResolution: classic</code></li></ul></li></ul></li></ul></li><li><p>declaration：编译之后是否生成<code>.d.ts</code>声明文件</p></li><li><p>skipLibCheck：是否跳过对声明文件的进行类型检查，默认为<code>false</code></p></li><li><p>typeRoots：查找声明文件的目录，默认为<code>node_modules/@types</code></p></li><li><p>types：编译过程中需要引入的声明文件列表，比如<code>node</code>,<code>jest</code>等</p></li><li><p>baseUrl：查找文件的基准目录 <code>.</code>代表当前目录</p></li><li><p>paths: 查找文件的别名, 和baseURL配合使用, 例如<code>&quot;@/*&quot;: [&quot;./src/*&quot;]</code>, 这样就可以在代码中使用<code>@/components/Button.tsx</code>来引用</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  &quot;baseUrl&quot;: &quot;./&quot;,</span></span>
<span class="line"><span>  &quot;paths&quot;: {</span></span>
<span class="line"><span>    &quot;@/*&quot;: [&quot;./src/*&quot;]</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h2><ul><li>指定要编译的文件的目录，默认是当前目录下的所有文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;include&quot;: [&quot;src/**/*&quot;]</span></span></code></pre></div><h2 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h2><ul><li>排除不希望被编译的文件或目录</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;exclude&quot;: [&quot;node_modules&quot;, &quot;**/*.test.ts&quot;]</span></span></code></pre></div><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><ul><li>继承其他配置文件中的设置</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;extends&quot;: &quot;./path/to/other-config.json&quot;</span></span></code></pre></div>`,14)])])}const m=o(t,[["render",i]]);export{h as __pageData,m as default};
