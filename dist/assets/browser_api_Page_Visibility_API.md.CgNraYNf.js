import{_ as e,c as i,o as s,ae as n}from"./chunks/framework.DzsIGSTZ.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser_api/Page_Visibility_API.md","filePath":"browser_api/Page_Visibility_API.md","lastUpdated":1757172066000}'),l={name:"browser_api/Page_Visibility_API.md"};function t(o,a,p,r,d,c){return s(),i("div",null,a[0]||(a[0]=[n(`<h2 id="用于检测页面在当前窗口中的可见性状态" tabindex="-1">用于检测页面在当前窗口中的可见性状态 <a class="header-anchor" href="#用于检测页面在当前窗口中的可见性状态" aria-label="Permalink to &quot;用于检测页面在当前窗口中的可见性状态&quot;">​</a></h2><h2 id="一-核心属性与事件" tabindex="-1">一. 核心属性与事件 <a class="header-anchor" href="#一-核心属性与事件" aria-label="Permalink to &quot;一. 核心属性与事件&quot;">​</a></h2><ol><li><code>document.visibilityState</code>: 返回当前页面可见性状态字符串，有以下几种值：</li></ol><ul><li>visible：页面至少部分可见（如标签页激活或窗口未最小化）</li><li>hidden：页面完全不可见（如标签页未激活或窗口最小化）</li><li>prerender：页面正在预渲染（仅在Chrome中使用）</li></ul><ol start="2"><li><code>document.hidden</code>: 返回一个布尔值，表示页面是否隐藏。</li></ol><ul><li>布尔值属性，为兼容旧版保留，true表示页面隐藏</li></ul><ol start="3"><li><code>visibilitychange</code>事件：当文档的可见性状态发生变化时触发。</li></ol><h2 id="二-典型应用场景" tabindex="-1">二. 典型应用场景 <a class="header-anchor" href="#二-典型应用场景" aria-label="Permalink to &quot;二. 典型应用场景&quot;">​</a></h2><ol><li>资源优化</li></ol><ul><li>页面隐藏时暂停视频播放、动画或数据轮询，减少CPU/内存消耗。</li></ul><h2 id="三-基础使用示例" tabindex="-1">三. 基础使用示例 <a class="header-anchor" href="#三-基础使用示例" aria-label="Permalink to &quot;三. 基础使用示例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>document.addEventListener(&#39;visibilitychange&#39;, () =&gt; {</span></span>
<span class="line"><span>  if (document.visibilityState === &#39;hidden&#39;) {</span></span>
<span class="line"><span>    // 暂停视频、动画或停止数据请求</span></span>
<span class="line"><span>    videoElement.pause();</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    // 恢复播放或重新加载数据</span></span>
<span class="line"><span>    videoElement.play();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre></div>`,12)]))}const u=e(l,[["render",t]]);export{_ as __pageData,u as default};
