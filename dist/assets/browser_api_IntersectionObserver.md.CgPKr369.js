import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.DzsIGSTZ.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser_api/IntersectionObserver.md","filePath":"browser_api/IntersectionObserver.md","lastUpdated":1757172066000}'),e={name:"browser_api/IntersectionObserver.md"};function t(p,s,r,h,k,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="intersectionobserver" tabindex="-1">IntersectionObserver <a class="header-anchor" href="#intersectionobserver" aria-label="Permalink to &quot;IntersectionObserver&quot;">​</a></h2><ul><li>用于异步监听目标元素与祖先元素或视口的交叉状态变化</li></ul><h2 id="一-核心特性" tabindex="-1">一. 核心特性 <a class="header-anchor" href="#一-核心特性" aria-label="Permalink to &quot;一. 核心特性&quot;">​</a></h2><ol><li>‌异步检测</li></ol><ul><li>通过浏览器底层优化，避免频繁触发主线程计算，性能显著优于 <code>scroll</code> 事件 + <code>getBoundingClientRect()</code> 的组合</li></ul><ol start="2"><li>灵活配置</li></ol><ul><li>支持自定义检测范围<code>（root）</code>、触发阈值<code>（threshold）</code>和边界扩展<code>（rootMargin）</code></li></ul><ol start="3"><li>精准回调</li></ol><ul><li>提供 isIntersecting 和 intersectionRatio 等属性，精确判断元素可见性状态</li></ul><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建观察者实例，并指定回调函数和配置选项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntersectionObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;元素进入视口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 50%可见时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rootMargin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10px&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 扩展检测边界</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unobserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止观察</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完全断开观察者实例</span></span></code></pre></div><h2 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h2><ol><li>图片懒加载</li></ol><ul><li>根据图片是否进入视口，动态加载或显示;当图片进入视口时动态加载 src，减少首屏请求;</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const lazyImages = document.querySelectorAll(&#39;.lazy-img&#39;);</span></span>
<span class="line"><span>const observer = new IntersectionObserver((entries) =&gt; {</span></span>
<span class="line"><span>  entries.forEach(entry =&gt; {</span></span>
<span class="line"><span>    if (entry.isIntersecting) {</span></span>
<span class="line"><span>      const img = entry.target;</span></span>
<span class="line"><span>      img.src = img.dataset.src;</span></span>
<span class="line"><span>      observer.unobserve(img);// 停止观察，避免重复加载</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>lazyImages.forEach(img =&gt; observer.observe(img));</span></span>
<span class="line"><span>//observer.disconnect();// 断开观察者实例</span></span></code></pre></div><ol start="2"><li>无限滚动加载</li></ol><ul><li>监听占位元素（如 #load-more-trigger）进入视口时加载下一页数据</li></ul><ol start="3"><li>动画触发</li></ol><ul><li>元素可见时添加 CSS 动画类，实现滚动动画效果</li></ul><ol start="4"><li>广告展示</li></ol><ul><li>精确计算广告元素的可见时间和比例</li></ul><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>兼容性</li></ol><ul><li>部分旧浏览器不支持，需引入 polyfill 或使用 fallback 方法;</li></ul><ol start="2"><li>性能优化</li></ol><ul><li>避免在回调中执行复杂操作，尽量减少 DOM 操作和样式计算;</li></ul><ol start="3"><li>边界处理</li></ol><ul><li>注意 rootMargin 的正负值对检测范围的影响;</li></ul><ol start="4"><li>多次触发问题</li></ol><ul><li>可能因频繁进入视口而重复触发，可通过 debounce/throttle 控制频率或设置单一观察目标;</li></ul><ol start="5"><li>‌内存泄漏</li></ol><ul><li>确保在不需要时调用 disconnect 方法断开观察者实例，避免内存泄漏;</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>IntersectionObserver 提供了一种高效、灵活的方式来监听元素与视口的交叉状态变化，适用于多种场景的动态内容加载和管理。通过合理配置和使用，可以显著提升页面交互体验和性能表现。</p>`,34)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
