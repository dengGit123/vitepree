import{_ as a,c as s,o as l,ae as t}from"./chunks/framework.0sbV76I4.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser_api/requestIdleCallback.md","filePath":"browser_api/requestIdleCallback.md","lastUpdated":1757172066000}'),e={name:"browser_api/requestIdleCallback.md"};function n(h,i,r,d,k,o){return l(),s("div",null,i[0]||(i[0]=[t(`<h2 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h2><ul><li>用于浏览器在<strong>空闲时段</strong>执行低优先级任务的 API</li><li>回调函数会在浏览器空闲时执行</li><li>其核心设计目标是避免非关键任务阻塞主线程，从而优化页面性能</li></ul><h2 id="一-核心机制" tabindex="-1">一. 核心机制 <a class="header-anchor" href="#一-核心机制" aria-label="Permalink to &quot;一. 核心机制&quot;">​</a></h2><ol><li>执行时机</li></ol><ul><li>浏览器空闲时段;在浏览器完成一帧内的关键任务（如布局、绘制、<code>requestAnimationFrame</code> 回调）后，若仍有<strong>剩余时间</strong>（通常每帧约16.67ms），则触发回调</li></ul><ol start="2"><li>优先级控制</li></ol><ul><li>回调函数执行优先级低于其他关键任务，与高优先级的 <code>requestAnimationFrame</code> 不同，<code>requestIdleCallback</code> 属于低优先级任务，仅在<strong>空闲时执行</strong> 如用户交互、动画等</li></ul><ol start="3"><li>超时机制</li></ol><ul><li>通过 <code>options.timeout</code> 参数强制回调在指定时间内执行（即使无空闲时间），但可能引发卡顿</li></ul><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例代码：在浏览器空闲时执行任务列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callbackId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (deadline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeRemaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    executeTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, { timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 超时2秒强制执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消回调</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancelIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callbackId);</span></span></code></pre></div><h2 id="三-关键参数与对象" tabindex="-1">三. 关键参数与对象 <a class="header-anchor" href="#三-关键参数与对象" aria-label="Permalink to &quot;三. 关键参数与对象&quot;">​</a></h2><ul><li><code>deadline</code> 对象 <ul><li><code>timeRemaining()</code> 方法：返回当前帧剩余时间，单位为毫秒</li><li><code>didTimeout</code> 属性：指示回调是否因超时而被触发</li></ul></li><li>options 配置 <ul><li><code>timeout</code>：指定回调执行的最长时间，单位为毫秒；仅支持 timeout 参数，用于设置强制执行的等待时间</li></ul></li></ul><h2 id="四-适用场景" tabindex="-1">四. 适用场景 <a class="header-anchor" href="#四-适用场景" aria-label="Permalink to &quot;四. 适用场景&quot;">​</a></h2><ol><li>非关键任务</li></ol><ul><li>如日志上报、数据分析等不影响用户体验的后台任务</li></ul><ol start="2"><li>增量更新</li></ol><ul><li>在浏览器空闲时执行，避免阻塞主线程</li></ul><ol start="3"><li>资源预加载</li></ol><ul><li>如图片懒加载、字体预加载等</li></ul><h2 id="五-注意事项" tabindex="-1">五. 注意事项 <a class="header-anchor" href="#五-注意事项" aria-label="Permalink to &quot;五. 注意事项&quot;">​</a></h2><ol><li>避免DOM操作</li></ol><ul><li>在回调中修改DOM可能导致重排/重绘，破坏性能优化初衷</li></ul><ol start="2"><li>任务拆分</li></ol><ul><li>将复杂任务拆分为多个小任务，确保每次执行时间不超过<code>timeRemaining()</code>返回的值</li></ul><h2 id="六-与-requestanimationframe-对比" tabindex="-1">六. 与 requestAnimationFrame 对比 <a class="header-anchor" href="#六-与-requestanimationframe-对比" aria-label="Permalink to &quot;六. 与 requestAnimationFrame 对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>requestIdleCallback</th><th>requestAnimationFrame</th></tr></thead><tbody><tr><td>执行时机</td><td>浏览器空闲时段</td><td>下一帧开始前（约16.67ms）</td></tr><tr><td>优先级</td><td>低（非关键任务）</td><td>高（动画、视觉效果等）</td></tr><tr><td>超时机制</td><td>支持（<code>timeout</code>参数）</td><td>不支持</td></tr></tbody></table>`,27)]))}const u=a(e,[["render",n]]);export{c as __pageData,u as default};
