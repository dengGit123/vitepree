import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.0sbV76I4.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser_api/ResizeObserver.md","filePath":"browser_api/ResizeObserver.md","lastUpdated":1757172066000}'),l={name:"browser_api/ResizeObserver.md"};function t(r,s,h,p,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="resizeobserver-是-javascript-提供的原生-api" tabindex="-1">ResizeObserver 是 JavaScript 提供的原生 API <a class="header-anchor" href="#resizeobserver-是-javascript-提供的原生-api" aria-label="Permalink to &quot;ResizeObserver 是 JavaScript 提供的原生 API&quot;">​</a></h2><ul><li>用于‌异步监听 DOM 元素的<strong>尺寸变化</strong></li></ul><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ol><li>‌异步监听: 通过微任务调度机制在浏览器布局/重绘流程后触发回调，避免阻塞主线程</li><li>精准监测: 直接监听元素级别的尺寸变化（宽度、高度），而非窗口或 DOM 结构变化</li><li>性能优化: 仅在元素尺寸实际变化时触发回调，减少不必要的计算和渲染</li></ol><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 ResizeObserver 实例，并传入回调函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResizeObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entries) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 遍历所有监听的元素，获取它们的尺寸变化信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.target, entry.contentRect); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出变化的 DOM 元素及其新的尺寸矩形对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听特定 DOM 元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myElement&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unobserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myElement&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断开与特定 DOM 元素的连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断开与所有 DOM 元素的连接</span></span></code></pre></div><h2 id="回调参数说明" tabindex="-1">回调参数说明 <a class="header-anchor" href="#回调参数说明" aria-label="Permalink to &quot;回调参数说明&quot;">​</a></h2><ul><li><code>entries</code>: 包含所有被监听元素尺寸变化信息的数组 <ul><li><code>target</code>: 被监听的 DOM 元素</li><li><code>contentRect</code>: 该元素的矩形区域对象，包含了宽度、高度等信息</li><li><code>borderBoxSize</code>: 包含边框的尺寸信息，适用于需要精确到边框宽度的场景</li></ul></li></ul><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><ol><li><strong>响应式布局</strong>: 根据图片或容器大小动态调整内容展示方式（如瀑布流布局）</li><li><strong>性能优化</strong>: 在元素尺寸改变时触发重绘/重构操作，避免不必要的计算和渲染开销</li><li><strong>动态广告位</strong>: 根据广告位的实际尺寸加载不同大小的广告资源</li><li><strong>图表库</strong>: 自动根据父容器的尺寸调整图表的显示范围和比例</li><li><strong>视频播放器</strong>: 根据播放窗口的尺寸自动调整视频播放的比例和填充模式</li><li><strong>自定义滚动条</strong>: 实现基于元素尺寸变化的自定义滚动条样式和行为</li><li><strong>拖拽交互</strong>: 根据拖拽对象的尺寸变化实时更新其位置和状态</li><li><strong>虚拟列表</strong>: 基于视口内可见区域的元素数量动态调整列表项的数量和排列方式</li><li><strong>卡片布局</strong>: 根据卡片的实际尺寸动态调整其在页面中的排列方式和间距</li><li><strong>动态表单字段</strong>: 根据输入框的实际尺寸动态调整提示信息</li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>浏览器兼容性: 目前主流现代浏览器已支持，但老版本浏览器可能需要 polyfill如 <code>resize-observer-polyfill</code></li><li>循环依赖‌：避免在回调中直接修改被观察元素的尺寸，可能导致无限循环</li></ul>`,12)]))}const g=i(l,[["render",t]]);export{E as __pageData,g as default};
