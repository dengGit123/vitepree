import{_ as n,c as s,o as e,ae as t}from"./chunks/framework.0sbV76I4.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"lang":"zh-CN","layout":"doc"},"headers":[],"relativePath":"typescript/any_unknown.md","filePath":"typescript/any_unknown.md","lastUpdated":1757172066000}'),l={name:"typescript/any_unknown.md"};function i(p,a,o,c,d,u){return e(),s("div",null,a[0]||(a[0]=[t(`<h2 id="sort" tabindex="-1">any,unknown的区别和应用场景 <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;any,unknown的区别和应用场景 {#sort}&quot;">​</a></h2><h4 id="相同点" tabindex="-1">相同点： <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点：&quot;">​</a></h4><ol><li>any和unknown都可以接收任何类型的值</li></ol><h4 id="不同点" tabindex="-1">不同点： <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点：&quot;">​</a></h4><ol><li>any类型的变量可以被赋予任何类型；而unknown类型的变量只能被赋值给any类型和unknown类型的变量</li><li>unknown类型的变量不能直接调用任何方法；也不能直接访问其属性；而any类型的变量可以直接调用方法和访问属性</li></ol><h4 id="any的应用场景-建议通过-tsconfig-json-启用-noimplicitany-配置-强制显式声明-any-以减少误用" tabindex="-1">any的应用场景:建议通过 tsconfig.json 启用 noImplicitAny 配置，强制显式声明 any 以减少误用 <a class="header-anchor" href="#any的应用场景-建议通过-tsconfig-json-启用-noimplicitany-配置-强制显式声明-any-以减少误用" aria-label="Permalink to &quot;any的应用场景:建议通过 tsconfig.json 启用 noImplicitAny 配置，强制显式声明 any 以减少误用&quot;">​</a></h4><ol><li>第三方库交互: any 可临时绕过类型检查</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare const legacyLib: any;</span></span>
<span class="line"><span>const result = legacyLib.getData(); // 动态数据暂用any处理</span></span></code></pre></div><ol start="2"><li>API 响应解析 : 解析结构未知的 JSON 数据时，any 允许直接操作响应结果</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>async function fetchData(url: string): Promise&lt;any&gt; {</span></span>
<span class="line"><span>  return (await fetch(url)).json();</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="3"><li>动态类型变量: 存储可能变更类型的变量时</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let dynamicValue: any = 100;</span></span>
<span class="line"><span>dynamicValue = &quot;Now a string&quot;; // 允许类型变更</span></span></code></pre></div><ol start="4"><li>混合类型集合: 存储多种类型数据时，使用any可以避免额外的类型定义</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const mixedArray: any[] = [&quot;text&quot;, 42, { key: &quot;value&quot; }];</span></span></code></pre></div><h4 id="unknown的应用场景" tabindex="-1">unknown的应用场景 <a class="header-anchor" href="#unknown的应用场景" aria-label="Permalink to &quot;unknown的应用场景&quot;">​</a></h4><ol><li>禁止直接操作: 禁止任何属性和方法的访问，必须通过类型检查或断言后才能使用</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let value: unknown = &#39;hello&#39;;</span></span>
<span class="line"><span>//value.length;</span><span> // 错误，不能直接访问属性</span></span></code></pre></div><ol start="2"><li>类型守卫: 通过typeof,instanceof缩小范围</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if(typeof value === &#39;string&#39;){</span></span>
<span class="line"><span>  console.log(value.length); // 正确，通过类型守卫缩小了范围</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="3"><li>处理外部数据: 解析JSON或API响应时，外部数据类型不确定，优先声明为unknown 再验证</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const data: unknown = awit response.json(); // 外部数据类型不确定，声明为unknown</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if(typeof data === &#39;object&#39; &amp;&amp; data !== null){</span></span>
<span class="line"><span>  console.log(data.name); // 正确，通过类型守卫缩小了范围</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="4"><li>联合与交叉类型</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type T = unknown | string; // 结果为unknown。 unknown 与其他类型的联合类型结果始终为unknown（除any外）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type T = unknown &amp; string; // 结果为string。 unknown 与其他类型的交叉类型结果始终为该类型(目标类型)（除any外）</span></span></code></pre></div>`,23)]))}const g=n(l,[["render",i]]);export{h as __pageData,g as default};
